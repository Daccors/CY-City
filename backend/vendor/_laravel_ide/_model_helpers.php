<?php

namespace App\Models {

	/**
	 * App\Models\DeliveringDrone
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $estimated_arrival_time
	 * @property string $departure
	 * @property mixed $capacity
	 * @property mixed $batterie
	 * @property string $stat
	 * @property int $localisations_id
	 * @property int $addresses_id
	 * @property int $id
	 * @property-read \App\Models\address $address
	 * @property-read \App\Models\Localisation $localisation
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\action> $actions
	 * @property-read int|null $actions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereAddressesId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereLocalisationsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereStat($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereBatterie($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereCapacity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereDeparture($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereEstimatedArrivalTime($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone query()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static DeliveringDrone|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static DeliveringDrone|null first(array|string $columns)
	 * @method static DeliveringDrone firstOrFail(array|string $columns, string|null $message)
	 * @method static DeliveringDrone sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<DeliveringDrone>|DeliveringDrone tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class DeliveringDrone extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\InformationScreen
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $last_content_update
	 * @property string $stat
	 * @property string $type_of_content
	 * @property int $localisations_id
	 * @property int $id
	 * @property-read \App\Models\Localisation $localisation
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\action> $actions
	 * @property-read int|null $actions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereLocalisationsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereTypeOfContent($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereStat($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereLastContentUpdate($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen query()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static InformationScreen|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static InformationScreen|null first(array|string $columns)
	 * @method static InformationScreen firstOrFail(array|string $columns, string|null $message)
	 * @method static InformationScreen sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<InformationScreen>|InformationScreen tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class InformationScreen extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\Localisation
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property float $longitude
	 * @property float $latitude
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\bike> $bikes
	 * @property-read int|null $bikes_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DeliveringDrone> $deliveringDrones
	 * @property-read int|null $deliveringDrones_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\InformationScreen> $informationScreens
	 * @property-read int|null $informationScreens_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\parkingsensor> $parkingSensors
	 * @property-read int|null $parkingSensors_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\smartbin> $smartBins
	 * @property-read int|null $smartBins_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\smartlamp> $smartLamps
	 * @property-read int|null $smartLamps_count
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereLatitude($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereLongitude($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation query()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static Localisation|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static Localisation|null first(array|string $columns)
	 * @method static Localisation firstOrFail(array|string $columns, string|null $message)
	 * @method static Localisation sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<Localisation>|Localisation tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class Localisation extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\action
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $action_type
	 * @property int|null $bike_id
	 * @property int|null $smart_lamp_id
	 * @property int|null $parking_sensors_id
	 * @property int|null $information_screen_id
	 * @property int|null $smart_bins_id
	 * @property int|null $delivering_drones_id
	 * @property int $users_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \App\Models\DeliveringDrone $deliveringDrone
	 * @property-read \App\Models\smartbin $smartBin
	 * @property-read \App\Models\InformationScreen $informationScreen
	 * @property-read \App\Models\parkingsensor $parkingSensor
	 * @property-read \App\Models\smartlamp $smartLamp
	 * @property-read \App\Models\bike $bike
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereUsersId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereDeliveringDronesId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereSmartBinsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereInformationScreenId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereParkingSensorsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereSmartLampId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereBikeId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereActionType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action query()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static action|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static action|null first(array|string $columns)
	 * @method static action firstOrFail(array|string $columns, string|null $message)
	 * @method static action sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<action>|action tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class action extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\address
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $name
	 * @property string $number
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\DeliveringDrone> $deliveringDrones
	 * @property-read int|null $deliveringDrones_count
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\User> $Users
	 * @property-read int|null $Users_count
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNumber($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereName($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address query()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static address|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static address|null first(array|string $columns)
	 * @method static address firstOrFail(array|string $columns, string|null $message)
	 * @method static address sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<address>|address tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class address extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\article
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $keyword
	 * @property string $content
	 * @property string|null $description
	 * @property string $author
	 * @property string|null $photo
	 * @property string $title
	 * @property int $id
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\consult> $consults
	 * @property-read int|null $consults_count
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereTitle($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article wherePhoto($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereAuthor($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereDescription($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereContent($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereKeyword($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article query()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static article|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static article|null first(array|string $columns)
	 * @method static article firstOrFail(array|string $columns, string|null $message)
	 * @method static article sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<article>|article tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class article extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\bike
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property bool $availability
	 * @property string $type
	 * @property string $brand
	 * @property int $localisations_id
	 * @property int $id
	 * @property-read \App\Models\Localisation $localisation
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\action> $actions
	 * @property-read int|null $actions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereLocalisationsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereBrand($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereType($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereAvailability($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike query()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static bike|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static bike|null first(array|string $columns)
	 * @method static bike firstOrFail(array|string $columns, string|null $message)
	 * @method static bike sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<bike>|bike tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class bike extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\connection
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $user_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\having> $havings
	 * @property-read int|null $havings_count
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection query()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static connection|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static connection|null first(array|string $columns)
	 * @method static connection firstOrFail(array|string $columns, string|null $message)
	 * @method static connection sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<connection>|connection tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class connection extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\consult
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $article_id
	 * @property int $user_id
	 * @property-read \App\Models\User $user
	 * @property-read \App\Models\article $article
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereUserId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereArticleId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult query()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static consult|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static consult|null first(array|string $columns)
	 * @method static consult firstOrFail(array|string $columns, string|null $message)
	 * @method static consult sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<consult>|consult tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class consult extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\having
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property int $connection_id
	 * @property int $users_id
	 * @property int $id
	 * @property-read \App\Models\User $user
	 * @property-read \App\Models\connection $connection
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereUsersId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereConnectionId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having query()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static having|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static having|null first(array|string $columns)
	 * @method static having firstOrFail(array|string $columns, string|null $message)
	 * @method static having sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<having>|having tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class having extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\modify
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $comments
	 * @property int $users_id_2
	 * @property int $users_id
	 * @property int $id
	 * @property-read \App\Models\User $userInitiating
	 * @property-read \App\Models\User $userModified
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereUsersId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereUsersId2($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereComments($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify query()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static modify|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static modify|null first(array|string $columns)
	 * @method static modify firstOrFail(array|string $columns, string|null $message)
	 * @method static modify sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<modify>|modify tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class modify extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\parkingsensor
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property bool $availability
	 * @property int $localisations_id
	 * @property int $id
	 * @property-read \App\Models\Localisation $localisation
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\action> $actions
	 * @property-read int|null $actions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereLocalisationsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereAvailability($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor query()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static parkingsensor|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static parkingsensor|null first(array|string $columns)
	 * @method static parkingsensor firstOrFail(array|string $columns, string|null $message)
	 * @method static parkingsensor sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<parkingsensor>|parkingsensor tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class parkingsensor extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\smartbin
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property string $stat
	 * @property string $last_collection
	 * @property bool $opened
	 * @property mixed $capacity
	 * @property int $localisations_id
	 * @property int $id
	 * @property-read \App\Models\Localisation $localisation
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\action> $actions
	 * @property-read int|null $actions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereLocalisationsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereCapacity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereOpened($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereLastCollection($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereStat($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin query()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static smartbin|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static smartbin|null first(array|string $columns)
	 * @method static smartbin firstOrFail(array|string $columns, string|null $message)
	 * @method static smartbin sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartbin>|smartbin tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class smartbin extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

	/**
	 * App\Models\smartlamp
	 *
	 * @property \Illuminate\Support\Carbon|null $updated_at
	 * @property \Illuminate\Support\Carbon|null $created_at
	 * @property bool $presence
	 * @property mixed $battery
	 * @property mixed $intensity
	 * @property string $stat
	 * @property int $localisations_id
	 * @property int $id
	 * @property-read \App\Models\Localisation $localisation
	 * @property-read \Illuminate\Database\Eloquent\Collection<int, \App\Models\action> $actions
	 * @property-read int|null $actions_count
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereLocalisationsId($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereStat($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereIntensity($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereBattery($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp wherePresence($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereCreatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereUpdatedAt($value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp newModelQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp newQuery()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp query()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp select(array|mixed $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp selectSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp selectRaw(string $expression)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp fromSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp fromRaw(string $expression, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp addSelect(array|mixed $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp distinct()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp from(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $table, string|null $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp useIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp forceIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp ignoreIndex(string $index)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp join(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp joinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second, string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp joinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second, string $type, bool $where)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp joinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp leftJoinLateral(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp leftJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp leftJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp leftJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp rightJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp rightJoinWhere(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string $operator, \Illuminate\Contracts\Database\Query\Expression|string $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp rightJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as, \Closure|\Illuminate\Contracts\Database\Query\Expression|string $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp crossJoin(\Illuminate\Contracts\Database\Query\Expression|string $table, \Closure|\Illuminate\Contracts\Database\Query\Expression|string|null $first, string|null $operator, \Illuminate\Contracts\Database\Query\Expression|string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp crossJoinSub(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query, string $as)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp mergeWheres(array $wheres, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp where(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static array prepareValueAndOperator(string $value, string $operator, bool $useDefault)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhere(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNot(\Closure|string|array|\Illuminate\Contracts\Database\Query\Expression $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second, string|null $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereColumn(\Illuminate\Contracts\Database\Query\Expression|string|array $first, string|null $operator, string|null $second)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereRaw(string $sql, mixed $bindings, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereRaw(string $sql, mixed $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNotLike(\Illuminate\Contracts\Database\Query\Expression|string $column, string $value, bool $caseSensitive)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNotIn(\Illuminate\Contracts\Database\Query\Expression|string $column, mixed $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereIntegerInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereIntegerNotInRaw(string $column, \Illuminate\Contracts\Support\Arrayable|array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNull(string|array|\Illuminate\Contracts\Database\Query\Expression $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNotNull(string|array|\Illuminate\Contracts\Database\Query\Expression $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNotBetween(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNotBetweenColumns(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNotNull(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereDate(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereTime(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|null $operator, \DateTimeInterface|string|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereDay(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereMonth(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereYear(\Illuminate\Contracts\Database\Query\Expression|string $column, \DateTimeInterface|string|int|null $operator, \DateTimeInterface|string|int|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNested(string $boolean)
	 * @method static \Illuminate\Database\Query\Builder forNestedWhere()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp addNestedWhereQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNotExists(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $callback)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp addWhereExistsQuery(string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereRowValues(array $columns, string $operator, array $values, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereRowValues(array $columns, string $operator, array $values)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonContains(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonContains(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonDoesntContain(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonDoesntContain(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonOverlaps(string $column, mixed $value, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonOverlaps(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonDoesntOverlap(string $column, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonDoesntOverlap(string $column, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonContainsKey(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonContainsKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonDoesntContainKey(string $column, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonDoesntContainKey(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereJsonLength(string $column, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereJsonLength(string $column, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp dynamicWhere(string $method, array $parameters)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereFullText(string|string[] $columns, string $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereFullText(string|string[] $columns, string $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereAll(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereAny(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNone(\Illuminate\Contracts\Database\Query\Expression[]|\Closure[]|string[] $columns, mixed $operator, mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp groupBy(array|\Illuminate\Contracts\Database\Query\Expression|string ...$groups)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp groupByRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp having(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orHaving(\Illuminate\Contracts\Database\Query\Expression|\Closure|string $column, \DateTimeInterface|string|int|float|null $operator, \DateTimeInterface|string|int|float|null $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp havingNested(string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp addNestedHavingQuery(\Illuminate\Database\Query\Builder $query, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp havingNull(array|string $columns, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orHavingNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp havingNotNull(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orHavingNotNull(string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp havingBetween(string $column, string $boolean, bool $not)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp havingRaw(string $sql, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orHavingRaw(string $sql)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orderBy(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orderByDesc(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp latest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp oldest(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp inRandomOrder(string|int $seed)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orderByRaw(string $sql, array $bindings)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp skip(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp offset(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp take(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp limit(int $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp groupLimit(int $value, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp forPage(int $page, int $perPage)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp forPageBeforeId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp forPageAfterId(int $perPage, int|null $lastId, string $column)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp reorder(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Contracts\Database\Query\Expression|string|null $column, string $direction)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp union(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query, bool $all)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp unionAll(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed> $query)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp lock(string|bool $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp lockForUpdate()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp sharedLock()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp beforeQuery()
	 * @method static void applyBeforeQueryCallbacks()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp afterQuery()
	 * @method static mixed applyAfterQueryCallbacks(mixed $result)
	 * @method static string toSql()
	 * @method static string toRawSql()
	 * @method static smartlamp|null find(int|string $id, array|string $columns)
	 * @method static mixed findOr(mixed $id, callable|list<string>|string $columns, callable|null $callback)
	 * @method static mixed value(string $column)
	 * @method static mixed rawValue()
	 * @method static mixed soleValue(string $column)
	 * @method static \Illuminate\Support\Collection<int,\stdClass> get(array|string $columns)
	 * @method static \Illuminate\Pagination\LengthAwarePaginator paginate(int|\Closure $perPage, array|string $columns, string $pageName, int|null $page, \Closure|int|null $total)
	 * @method static \Illuminate\Contracts\Pagination\Paginator simplePaginate(int $perPage, array|string $columns, string $pageName, int|null $page)
	 * @method static \Illuminate\Contracts\Pagination\CursorPaginator cursorPaginate(int|null $perPage, array|string $columns, string $cursorName, \Illuminate\Pagination\Cursor|string|null $cursor)
	 * @method static int getCountForPagination(array $columns)
	 * @method static \Illuminate\Support\LazyCollection<int,\stdClass> cursor()
	 * @method static mixed pluck(\Illuminate\Contracts\Database\Query\Expression|string $column, string|null $key)
	 * @method static string implode(string $column, string $glue)
	 * @method static bool exists()
	 * @method static bool doesntExist()
	 * @method static mixed existsOr()
	 * @method static mixed doesntExistOr()
	 * @method static int count(\Illuminate\Contracts\Database\Query\Expression|string $columns)
	 * @method static mixed min(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed max(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed sum(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed avg(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed average(\Illuminate\Contracts\Database\Query\Expression|string $column)
	 * @method static mixed aggregate(string $function, array $columns)
	 * @method static float|int numericAggregate(string $function, array $columns)
	 * @method static bool insert()
	 * @method static int insertOrIgnore()
	 * @method static int insertGetId(string|null $sequence)
	 * @method static int insertUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int insertOrIgnoreUsing(\Closure|\Illuminate\Database\Query\Builder|\Illuminate\Database\Eloquent\Builder<mixed>|string $query)
	 * @method static int update()
	 * @method static int updateFrom()
	 * @method static bool updateOrInsert()
	 * @method static int upsert(array|string $uniqueBy, array|null $update)
	 * @method static int increment(string $column, float|int $amount)
	 * @method static int incrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int decrement(string $column, float|int $amount)
	 * @method static int decrementEach(array<string,float|int|numeric-string> $columns, array<string,mixed> $extra)
	 * @method static int delete(mixed $id)
	 * @method static void truncate()
	 * @method static \Illuminate\Database\Query\Builder newQuery()
	 * @method static array getColumns()
	 * @method static \Illuminate\Contracts\Database\Query\Expression raw(mixed $value)
	 * @method static mixed getLimit()
	 * @method static mixed getOffset()
	 * @method static array getBindings()
	 * @method static array getRawBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp setBindings(string $type)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp addBinding(mixed $value, string $type)
	 * @method static mixed castBinding(mixed $value)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp mergeBindings()
	 * @method static array cleanBindings()
	 * @method static \Illuminate\Database\ConnectionInterface getConnection()
	 * @method static \Illuminate\Database\Query\Processors\Processor getProcessor()
	 * @method static \Illuminate\Database\Query\Grammars\Grammar getGrammar()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp useWritePdo()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp clone()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp cloneWithout()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp cloneWithoutBindings()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp dump(mixed ...$args)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp dumpRawSql()
	 * @method static void dd()
	 * @method static void ddRawSql()
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp wherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWherePast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNowOrPast(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereNowOrFuture(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereToday(array|string $columns, string $boolean)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp whereTodayOrAfter(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereBeforeToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereTodayOrBefore(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereAfterToday(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp orWhereTodayOrAfter(array|string $columns)
	 * @method static bool chunk(int $count, callable $callback)
	 * @method static mixed chunkMap(callable $callback, int $count)
	 * @method static bool each(callable $callback, int $count)
	 * @method static bool chunkById(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool chunkByIdDesc(int $count, callable $callback, string|null $column, string|null $alias)
	 * @method static bool orderedChunkById(int $count, callable $callback, string|null $column, string|null $alias, bool $descending)
	 * @method static bool eachById(callable $callback, int $count, string|null $column, string|null $alias)
	 * @method static mixed lazy(int $chunkSize)
	 * @method static mixed lazyById(int $chunkSize, string|null $column, string|null $alias)
	 * @method static mixed lazyByIdDesc(int $chunkSize, string|null $column, string|null $alias)
	 * @method static smartlamp|null first(array|string $columns)
	 * @method static smartlamp firstOrFail(array|string $columns, string|null $message)
	 * @method static smartlamp sole(array|string $columns)
	 * @method static \Illuminate\Database\Eloquent\Builder<smartlamp>|smartlamp tap(callable $callback)
	 * @method static mixed when(callable|\TWhenParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static mixed unless(callable|\TUnlessParameter|null $value, callable|null $callback, callable|null $default)
	 * @method static \Illuminate\Support\Collection explain()
	 * @method static void macro(string $name, object|callable $macro)
	 * @method static void mixin(object $mixin, bool $replace)
	 * @method static bool hasMacro(string $name)
	 * @method static void flushMacros()
	 * @method static mixed macroCall(string $method, array $parameters)
	 * @mixin \Illuminate\Database\Query\Builder
	 */
	class smartlamp extends \Illuminate\Database\Eloquent\Model
	{
		//
	}

}